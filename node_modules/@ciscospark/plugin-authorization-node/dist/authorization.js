'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _dec, _desc, _value, _obj; /**!
                                *
                                * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
                                * @ignore
                                */

/* eslint camelcase: [0] */

var _common = require('@ciscospark/common');

var _sparkCore = require('@ciscospark/spark-core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

/**
 * NodeJS support for OAuth2
 * @class
 * @variation 2
 */
var Authorization = _sparkCore.SparkPlugin.extend((_dec = (0, _common.whileInFlight)('isAuthorizing'), (_obj = {
  derived: {
    /**
     * Alias of {@link Authorization(2)#isAuthorizing}
     * @instance
     * @memberof Authorization(2)
     * @type {boolean}
     */
    isAuthenticating: {
      deps: ['isAuthorizing'],
      fn: function fn() {
        return this.isAuthorizing;
      }
    }
  },

  session: {
    /**
     * Indicates if an Authorization Code exchange is inflight
     * @instance
     * @memberof Authorization(2)
     * @type {boolean}
     */
    isAuthorizing: {
      default: false,
      type: 'boolean'
    }
  },

  namespace: 'Credentials',

  /**
   * Exchanges an authorization code for an access token
   * @instance
   * @memberof Authorization(2)
   * @param {Object} options
   * @param {Object} options.code
   * @returns {Promise}
   */
  requestAuthorizationCodeGrant: function requestAuthorizationCodeGrant() {
    var _this = this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this.logger.info('credentials: requesting authorization code grant');

    if (!options.code) {
      return _promise2.default.reject(new Error('`options.code` is required'));
    }

    return this.spark.request({
      method: 'POST',
      uri: this.config.tokenUrl,
      form: {
        grant_type: 'authorization_code',
        redirect_uri: this.config.redirect_uri,
        code: options.code,
        self_contained_token: true
      },
      auth: {
        user: this.config.client_id,
        pass: this.config.client_secret,
        sendImmediately: true
      },
      shouldRefreshAccessToken: false
    }).then(function (res) {
      _this.spark.credentials.set({ supertoken: res.body });
    }).catch(function (res) {
      if (res.statusCode !== 400) {
        return _promise2.default.reject(res);
      }

      var ErrorConstructor = _sparkCore.grantErrors.select(res.body.error);
      return _promise2.default.reject(new ErrorConstructor(res._res || res));
    });
  },
  version: '1.3.0'
}, (_applyDecoratedDescriptor(_obj, 'requestAuthorizationCodeGrant', [_dec, _common.oneFlight], (0, _getOwnPropertyDescriptor2.default)(_obj, 'requestAuthorizationCodeGrant'), _obj)), _obj)));

exports.default = Authorization;