/**!
 *
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 * @private
 */

import '@ciscospark/plugin-authorization-node';
import {nodeOnly} from '@ciscospark/test-helper-mocha';
import {assert} from '@ciscospark/test-helper-chai';
import testUsers from '@ciscospark/test-helper-test-users';
import CiscoSpark, {filterScope} from '@ciscospark/spark-core';

const apiScope = filterScope(`spark:kms`, process.env.CISCOSPARK_SCOPE);

nodeOnly(describe)(`plugin-authorization-node`, () => {
  describe(`Authorization`, () => {

    describe(`#requestAuthorizationCodeGrant()`, () => {

      describe(`when the user has the spark entitlement`, () => {
        let code, spark;

        beforeEach(`create auth code only test user`, () => testUsers.create({config: {authCodeOnly: true}})
          .then(([u]) => {
            spark = new CiscoSpark();
            code = u.token.auth_code;
          }));

        it(`exchanges an authorization code for an access token`, () => spark.authorization.requestAuthorizationCodeGrant({code})
          .then(() => {
            assert.isDefined(spark.credentials.supertoken);
            return Promise.all([
              assert.isFulfilled(spark.credentials.getUserToken(apiScope)),
              assert.isFulfilled(spark.credentials.getUserToken(`spark:kms`))
            ]);
          }));
      });

      describe(`when the user does not have the spark entitlement`, () => {
        let code, spark;
        beforeEach(`create non-spark-entitled test user`, () => testUsers.create({
          config: {
            // We omit the spark entitlment so that CI gives us a token lacking
            // spark:* scopes
            entitlements: [
              `squaredCallInitiation`,
              `squaredRoomModeration`,
              `squaredInviter`,
              `webExSquared`
            ],
            authCodeOnly: true
          }
        })
          .then(([u]) => {
            spark = new CiscoSpark();
            code = u.token.auth_code;
          }));

        it(`exchanges an authorization code for an access token`, () => spark.authorization.requestAuthorizationCodeGrant({code})
          .then(() => {
            assert.isDefined(spark.credentials.supertoken);
            return Promise.all([
              assert.isFulfilled(spark.credentials.getUserToken(apiScope))
                .then((token) => assert.equal(token.access_token, spark.credentials.supertoken.access_token)),
              assert.isFulfilled(spark.credentials.getUserToken(`spark:kms`))
                .then((token) => assert.equal(token.access_token, spark.credentials.supertoken.access_token))
            ]);
          }));
      });
    });
  });
});
